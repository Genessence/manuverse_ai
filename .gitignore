# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm
#  project, it is not uncommon to have multiple modules or packages in a single project.
.idea/

# Visual Studio Code
.vscode/
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
!.vscode/settings.json

# Streamlit specific
.streamlit/

# Data files (uncomment if you want to exclude data files)
# *.csv
# *.xlsx
# *.xls
# *.json
# *.parquet

# Large data files excluded from version control
MiningProcess_Flotation_Plant_Database.csv

# Generated plots and images
*.png
*.jpg
*.jpeg
*.gif
*.svg
!sample_data.csv

# Temporary files
*.tmp
*.temp
*~

# Operating System Files
# macOS
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Windows
Desktop.ini
$RECYCLE.BIN/

# Linux
*~

# Log files
*.log
logs/

# Application specific
config.local.ini
secrets.json
api_keys.txt
.env.local
.env.production

# Backup files
*.bak
*.backup
*~

# IDE and editor files
*.swp
*.swo
*~
.project
.pydevproject

# Documentation build
docs/build/
site/

# Testing artifacts
.coverage
htmlcov/
.pytest_cache/
.tox/

# =============================================================================
# FRONTEND / NODE.JS / REACT PATTERNS
# =============================================================================

# Node.js dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Dependency directories
jspm_packages/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
public

# Vuepress build output
.vuepress/dist

# Vuepress v2.x temp and cache directory
.temp
.cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

# React specific
# Production builds
react-frontend/build/
react-frontend/dist/

# Create React App specific
react-frontend/build/

# TypeScript compiled output
react-frontend/**/*.js
react-frontend/**/*.js.map
!react-frontend/public/**/*.js
!react-frontend/src/setupTests.js
!react-frontend/src/reportWebVitals.js

# Storybook build outputs
storybook-static

# Tailwind CSS generated files (if using build process)
react-frontend/src/tailwind.output.css

# Bundle analyzer reports
react-frontend/bundle-report.html
react-frontend/stats.json

# Webpack bundle analyzer
react-frontend/webpack-stats.json

# Hot module replacement files
react-frontend/.cache/

# Editor and IDE files for frontend
react-frontend/.vscode/
react-frontend/.idea/

# Package manager lock files (uncomment if you want to exclude)
# react-frontend/package-lock.json
# react-frontend/yarn.lock

# Testing coverage for frontend
react-frontend/coverage/

# SCSS/Sass cache
react-frontend/.sass-cache/
react-frontend/**/.sass-cache/

# PostCSS cache
react-frontend/.postcssrc*

# ESLint and Prettier cache
react-frontend/.eslintcache
react-frontend/.prettiercache
